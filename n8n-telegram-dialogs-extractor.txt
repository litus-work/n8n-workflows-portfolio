{
  "nodes": [
    {
      "parameters": {
        "binaryPropertyName": "file_zip"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        -300,
        -80
      ],
      "id": "7451afab-9b84-4d29-bcc4-3edc7da4a61d",
      "name": "Compression"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "470dc814-7b13-4afb-b92d-f146f3649fbb",
              "leftValue": "={{$binary.data.fileName}}",
              "rightValue": "=messages.html",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        360,
        -60
      ],
      "id": "8cf66e9d-302c-4bcd-9e3a-94fd176cbde0",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        600,
        -80
      ],
      "id": "c2caa48b-4848-4e3e-831f-d5faefee1202",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "output = []\n\nfor item in items:\n    binaries = item.get(\"binary\", {})\n    \n    for key, binary_data in binaries.items():\n        output.append({\n            \"json\": {},\n            \"binary\": {\n                \"data\": binary_data\n            }\n        })\n\nreturn output"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        -80
      ],
      "id": "ec073b67-22bf-4981-b86a-a129e40e77b4",
      "name": "Code"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\nhtml = items[0][\"json\"][\"data\"]  # правильный доступ к первому item'у\nsoup = BeautifulSoup(html, \"html.parser\")\n\noutput = []\n\nfor div in soup.find_all(\"div\", class_=\"message default clearfix\"):\n    name = div.find(\"div\", class_=\"from_name\")\n    text = div.find(\"div\", class_=\"text\")\n    date = div.find(\"div\", class_=\"date\")\n\n    output.append({\n        \"json\": {\n            \"author\": name.text.strip() if name else \"\",\n            \"datetime\": date[\"title\"] if date and date.has_attr(\"title\") else \"\",\n            \"text\": text.text.strip() if text else \"\"\n        }\n    })\n\nreturn output"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        780,
        -80
      ],
      "id": "40fd0a02-d93a-470d-8db6-cfd2f28b18e9",
      "name": "Code1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e0f380b0-c7b9-4b96-825c-b43577014e6b",
              "leftValue": "={{ $binary.data.fileName }}",
              "rightValue": "=.ogg",
              "operator": {
                "type": "string",
                "operation": "endsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        120,
        -80
      ],
      "id": "77fb646d-4d9f-4f50-8936-70e503da852c",
      "name": "If1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/audio/transcriptions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "model",
              "value": "whisper-large-v3"
            },
            {
              "name": "response_format",
              "value": "verbose_json"
            },
            {
              "name": "language",
              "value": "ru"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1260,
        -500
      ],
      "id": "82367801-6512-4c38-84a8-d8f3513a5768",
      "name": "HTTP Request",
      "credentials": {
        "httpBearerAuth": {
          "id": "U4jr9sQbJB4k1uoK",
          "name": "Bearer Auth account 2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        820,
        -380
      ],
      "id": "88196412-a4ee-4a61-b413-b843888d8a02",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2520,
        -320
      ],
      "id": "2924ffa6-34f0-4d62-a20a-5991ece7ffce",
      "name": "Wait",
      "webhookId": "29bcecbb-88e0-4ee4-9b42-e7c6477f5aa2"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\n\nresults = []\n\nfor item in items:\n    filename = item[\"binary\"][\"data\"][\"fileName\"]\n    \n    match = re.search(r\"(\\d{2})-(\\d{2})-(\\d{4})_(\\d{2})-(\\d{2})-(\\d{2})\", filename)\n\n    if match:\n        date_str = f\"{match.group(1)}.{match.group(2)}.{match.group(3)}\"\n        time_str = f\"{match.group(4)}:{match.group(5)}:{match.group(6)}\"\n        dt_str = f\"{date_str} {time_str}\"\n    else:\n        dt_str = \"неизвестно\"\n\n    # Правильное добавление в json\n    item[\"json\"][\"datetime\"] = dt_str\n    results.append(item)\n\nreturn results\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        -360
      ],
      "id": "ef7f6090-3c84-43ff-b0ef-78b1e0ade78f",
      "name": "Code2"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from datetime import datetime\n\nresults = []\n\nfor item in items:\n    json_data = item.get(\"json\", {})\n\n    # Пропускаем, если нужных полей нет\n    if \"datetime\" not in json_data and \"metadata\" not in json_data:\n        continue\n\n    datetime_str = json_data.get(\"datetime\") or json_data.get(\"metadata\", {}).get(\"datetime\", \"неизвестно\")\n    text = json_data.get(\"text\", \"текст не найден\")\n\n    results.append({\n        \"datetime\": datetime_str,\n        \"text\": text\n    })\n\n# Функция для парсинга даты\ndef parse_datetime(dt_str):\n    try:\n        return datetime.strptime(dt_str, \"%d.%m.%Y %H:%M:%S\")\n    except:\n        return datetime.min\n\n# Сортировка\nresults.sort(key=lambda x: parse_datetime(x[\"datetime\"]))\n\n# Вывод\nreturn [{\n    \"json\": {\n        \"dialog\": results\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        -560
      ],
      "id": "88e29a22-3111-4b51-85ea-313b7c0a5f34",
      "name": "Code3"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1480,
        -340
      ],
      "id": "9c87fdef-c714-4a19-a247-2bcba3801a03",
      "name": "Merge2"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "merged_dialog = []\n\nfor item in items:\n    dialog = item.get(\"json\", {}).get(\"dialog\", [])\n    merged_dialog.extend(dialog)\n\nreturn {\n    \"json\": {\n        \"dialog\": merged_dialog\n    }\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1900,
        -340
      ],
      "id": "a821abda-e2f3-48ac-a782-b0ebb269ae28",
      "name": "Code4"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        2700,
        -320
      ],
      "id": "ce5b4c7c-f255-47cb-8b68-1891b79ce838"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import json\nfrom datetime import datetime\n\n# Данные из предыдущего шага\ndialog_data = items[0][\"json\"].get(\"dialog\", [])\n\n# Формируем имя файла с меткой времени\nfilename = f\"dialog_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.json\"\n\n# Записываем в файл\nwith open(f\"/mnt/data/{filename}\", \"w\", encoding=\"utf-8\") as f:\n    json.dump({\"dialog\": dialog_data}, f, ensure_ascii=False, indent=2)\n\n# Возвращаем путь к файлу\nreturn [{\n    \"json\": {\n        \"filename\": filename,\n        \"path\": f\"/mnt/data/{filename}\"\n    },\n    \"binary\": {\n        \"data\": {\n            \"fileName\": filename,\n            \"filePath\": f\"/mnt/data/{filename}\",\n            \"mimeType\": \"application/json\"\n        }\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2120,
        -340
      ],
      "id": "39586b93-9ca9-4128-80de-27ba566b42ef",
      "name": "Code5"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload-chat",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -500,
        -80
      ],
      "id": "29bf94c4-d30c-4591-bb86-aa58ee9ff1f9",
      "name": "Webhook",
      "webhookId": "80ee53a8-57bc-46da-8449-024484b886bc"
    }
  ],
  "connections": {
    "Compression": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        []
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        []
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Compression",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "4a5f758c8f9630703668d06d430991b9c6805ececc8b1949050c44f19f7c0eb9"
  }
}